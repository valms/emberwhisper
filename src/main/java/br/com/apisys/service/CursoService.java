package br.com.apisys.service;import br.com.apisys.model.Curso;import br.com.apisys.repository.CursoRepository;import com.google.gson.Gson;import com.google.gson.JsonObject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.ArrayList;import java.util.Collection;import java.util.Optional;@RestController@RequestMapping("/api")public class CursoService {    private final CursoRepository cursoRepository;    @Autowired    public CursoService(CursoRepository cursoRepository) {        this.cursoRepository = cursoRepository;    }    /**     * Monta uma lista de todos os cursos salvos     *     * @return Lista de todos os cursos     * @see Curso     */    @GetMapping("/cursos")    public Collection<Curso> cursos() {        return new ArrayList<>(this.cursoRepository.findAll());    }    /**     * Devolve os dados de um curso cujo ID foi enviado na URL     *     * @param id do curso pesquisado     * @return dados do curso     */    @GetMapping("/curso/{id}")    public ResponseEntity<Curso> retrieveCurso(@PathVariable long id) {        Optional<Curso> databaseCurso = this.cursoRepository.findById(id);        return databaseCurso.map(curso -> new ResponseEntity<>(curso, HttpStatus.OK)).orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));    }    /**     * Exclui um curso da base de dados via id passado     *     * @param id ID do curso a ser apagado     */    @DeleteMapping("/curso/{id}")    public ResponseEntity<Object> deleteCurso(@PathVariable long id) {        try {            this.cursoRepository.deleteById(id);            return ResponseEntity.status(HttpStatus.CREATED).contentType(MediaType.APPLICATION_JSON).body(this.buildResponse("Curso excluído com sucesso!"));        } catch (Exception e) {            return ResponseEntity.status(HttpStatus.BAD_REQUEST).contentType(MediaType.APPLICATION_JSON).body(this.buildResponse("Erro ao excluir o Curso: " + e.getLocalizedMessage()));        }    }    /**     * Cria Um novo curso     *     * @param curso Dados para criacao do Curso     * @return status da criacao     */    @PostMapping("/curso")    public ResponseEntity<Object> createCurso(@RequestBody Curso curso) {        try {            this.cursoRepository.save(curso);            return ResponseEntity.status(HttpStatus.CREATED).contentType(MediaType.APPLICATION_JSON).body(this.buildResponse("Curso criado com sucesso!"));        } catch (Exception e) {            return ResponseEntity.status(HttpStatus.BAD_REQUEST).contentType(MediaType.APPLICATION_JSON).body(this.buildResponse("Erro ao criar o Curso: " + e.getLocalizedMessage()));        }    }    /**     * Atualiza um Curso     *     * @param curso Novos dados do Curso     * @param id    ID do Curso a ser atualizado     * @return status 20x (200 ou 204) no sucesso     */    @PutMapping("/curso/{id}")    public ResponseEntity<Object> updateCurso(@RequestBody Curso curso, @PathVariable long id) {        Optional<Curso> cursoOptional = this.cursoRepository.findById(id);        if (!cursoOptional.isPresent())            return new ResponseEntity<>(this.buildResponse("Curso de id " + id + " não foi localizado"), HttpStatus.NOT_FOUND);        curso.setId(id);        this.cursoRepository.save(curso);        return new ResponseEntity<>(this.buildResponse("Curso atualizado com sucesso!"), HttpStatus.OK);    }    private Object buildResponse(String body) {        JsonObject jsonObject = new JsonObject();        Gson gson = new Gson();        jsonObject.addProperty("response", body);        return gson.toJson(jsonObject);    }}